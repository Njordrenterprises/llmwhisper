[
  {
    "markdown": "\n\n# Build your first Astro Blog\n\nIn this tutorial, you‚Äôll learn Astro‚Äôs key features by building a fully-functioning blog, from zero to full launch! üöÄ\n\nAlong the way, you‚Äôll:\n\n- Set up your development environment\n- Create pages and blog posts for your website\n- Build with Astro components\n- Query and work with local files\n- Add interactivity to your site\n- Deploy your site to the web\n\nWant a preview of what you‚Äôre going to build? You can view the final project on [GitHub](https://github.com/withastro/blog-tutorial-demo) or [StackBlitz](https://stackblitz.com/github/withastro/blog-tutorial-demo/tree/complete?file=src%2Fpages%2Findex.astro).\n\n## Checklist\n\n[Section titled Checklist](#checklist)\n\n- Looks great! I‚Äôm ready to get started!\n\nTutorials\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/tutorial/0-introduction/",
      "title": "Build your first Astro Blog | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/tutorial/0-introduction.webp",
      "ogTitle": "Build your first Astro Blog",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/tutorial/0-introduction/",
      "ogSiteName": "Docs",
      "description": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!",
      "ogDescription": "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Components\n\n**Astro components** are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime. You can spot an Astro component by its file extension: `.astro`.\n\nAstro components are extremely flexible. Often, an Astro component will contain some **reusable UI on the page**, like a header or a profile card. At other times, an Astro component may contain a smaller snippet of HTML, like a collection of common `<meta>` tags that make SEO easy to work with. Astro components can even contain an entire page layout.\n\nThe most important thing to know about Astro components is that they **don‚Äôt render on the client**. They render to HTML either at build-time or on-demand using [server-side rendering (SSR)](/en/guides/server-side-rendering/). You can include JavaScript code inside of your component frontmatter, and all of it will be stripped from the final page sent to your users‚Äô browsers. The result is a faster site, with zero JavaScript footprint added by default.\n\nWhen your Astro component does need client-side interactivity, you can add [standard HTML `<script>` tags](/en/guides/client-side-scripts/) or [UI Framework components](/en/guides/framework-components/#hydrating-interactive-components).\n\n## Component Structure\n\n[Section titled Component Structure](#component-structure)\n\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n```\n\n---\n\n// Component Script (JavaScript)\n\n---\n\n<!-- Component Template (HTML + JS Expressions) -->\n```\n\n### The Component Script\n\n[Section titled The Component Script](#the-component-script)\n\nAstro uses a code fence ( `---`) to identify the component script in your Astro component. If you‚Äôve ever written Markdown before, you may already be familiar with a similar concept called _frontmatter._ Astro‚Äôs idea of a component script was directly inspired by this concept.\n\nYou can use the component script to write any JavaScript code that you need to render your template. This can include:\n\n- importing other Astro components\n- importing other framework components, like React\n- importing data, like a JSON file\n- fetching content from an API or database\n- creating variables that you will reference in your template\n\n```\n\n---\n\nimport SomeAstroComponent from '../components/SomeAstroComponent.astro';\n\nimport SomeReactComponent from '../components/SomeReactComponent.jsx';\n\nimport someData from '../data/pokemon.json';\n\n// Access passed-in component props, like `<X title=\"Hello, World\" />`\n\nconst { title } = Astro.props;\n\n// Fetch external data, even from a private API or database\n\nconst data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());\n\n---\n\n<!-- Your template here! -->\n```\n\nThe code fence is designed to guarantee that the JavaScript that you write in it is ‚Äúfenced in.‚Äù It won‚Äôt escape into your frontend application, or fall into your user‚Äôs hands. You can safely write code here that is expensive or sensitive (like a call to your private database) without worrying about it ever ending up in your user‚Äôs browser.\n\n### The Component Template\n\n[Section titled The Component Template](#the-component-template)\n\nThe component template is below the code fence and determines the HTML output of your component.\n\nIf you write plain HTML here, your component will render that HTML in any Astro page it is imported and used.\n\nHowever, [Astro‚Äôs component template syntax](/en/basics/astro-syntax/) also supports **JavaScript expressions**, Astro [`<style>`](/en/guides/styling/#styling-in-astro) and [`<script>`](/en/guides/client-side-scripts/#using-script-in-astro) tags, **imported components**, and [**special Astro directives**](/en/reference/directives-reference/). Data and values defined in the component script can be used in the component template to produce dynamically-created HTML.\n\n```\n\n---\n\n// Your component script here!\n\nimport Banner from '../components/Banner.astro';\n\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\n\nconst myFavoritePokemon = [/* ... */];\n\nconst { title } = Astro.props;\n\n---\n\n<!-- HTML comments supported! -->\n\n{/* JS comment syntax is also valid! */}\n\n<Banner />\n\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n\n<p>{title}</p>\n\n<!-- Include other UI framework components with a `client:` directive to hydrate: -->\n\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n\n<ul>\n\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n\n</ul>\n\n<!-- Use a template directive to build class names from multiple strings or even objects! -->\n\n<p class:list={[\"add\", \"dynamic\", {classNames: true}]} />\n```\n\n## Component-based design\n\n[Section titled Component-based design](#component-based-design)\n\nComponents are designed to be **reusable** and **composable**. You can use components inside of other components to build more and more advanced UI. For example, a `Button` component could be used to create a `ButtonGroup` component:\n\n```\n\n---\n\nimport Button from './Button.astro';\n\n---\n\n<div>\n\n  <Button title=\"Button 1\" />\n\n  <Button title=\"Button 2\" />\n\n  <Button title=\"Button 3\" />\n\n</div>\n```\n\n## Component Props\n\n[Section titled Component Props](#component-props)\n\nAn Astro component can define and accept props. These props then become available to the component template for rendering HTML. Props are available on the `Astro.props` global in your frontmatter script.\n\nHere is an example of a component that receives a `greeting` prop and a `name` prop. Notice that the props to be received are destructured from the global `Astro.props` object.\n\n```\n\n---\n\n// Usage: <GreetingHeadline greeting=\"Howdy\" name=\"Partner\" />\n\nconst { greeting, name } = Astro.props;\n\n---\n\n<h2>{greeting}, {name}!</h2>\n```\n\nThis component, when imported and rendered in other Astro components, layouts or pages, can pass these props as attributes:\n\n```\n\n---\n\nimport GreetingHeadline from './GreetingHeadline.astro';\n\nconst name = 'Astro';\n\n---\n\n<h1>Greeting Card</h1>\n\n<GreetingHeadline greeting=\"Hi\" name={name} />\n\n<p>I hope you have a wonderful day!</p>\n```\n\nYou can also define your props with TypeScript with a `Props` type interface. Astro will automatically pick up the `Props` interface in your frontmatter and give type warnings/errors. These props can also be given default values when destructured from `Astro.props`.\n\n```\n\n---\n\ninterface Props {\n\n  name: string;\n\n  greeting?: string;\n\n}\n\nconst { greeting = \"Hello\", name } = Astro.props;\n\n---\n\n<h2>{greeting}, {name}!</h2>\n```\n\nComponent props can be given default values to use when none are provided.\n\n```\n\n---\n\nconst { greeting = \"Hello\", name = \"Astronaut\" } = Astro.props;\n\n---\n\n<h2>{greeting}, {name}!</h2>\n```\n\n## Slots\n\n[Section titled Slots](#slots)\n\nThe `<slot />` element is a placeholder for external HTML content, allowing you to inject (or ‚Äúslot‚Äù) child elements from other files into your component template.\n\nBy default, all child elements passed to a component will be rendered in its `<slot />`.\n\n```\n\n---\n\nimport Header from './Header.astro';\n\nimport Logo from './Logo.astro';\n\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n\n---\n\n<div id=\"content-wrapper\">\n\n  <Header />\n\n  <Logo />\n\n  <h1>{title}</h1>\n\n  <slot />  <!-- children will go here -->\n\n  <Footer />\n\n</div>\n```\n\n```\n\n---\n\nimport Wrapper from '../components/Wrapper.astro';\n\n---\n\n<Wrapper title=\"Fred's Page\">\n\n  <h2>All about Fred</h2>\n\n  <p>Here is some stuff about Fred.</p>\n\n</Wrapper>\n```\n\nThis pattern is the basis of an [Astro layout component](/en/basics/layouts/): an entire page of HTML content can be ‚Äúwrapped‚Äù with `<SomeLayoutComponent></SomeLayoutComponent>` tags and sent to the component to render inside of common page elements defined there.\n\n### Named Slots\n\n[Section titled Named Slots](#named-slots)\n\nAn Astro component can also have named slots. This allows you to pass only HTML elements with the corresponding slot name into a slot‚Äôs location.\n\nSlots are named using the `name` attribute:\n\n```\n\n---\n\nimport Header from './Header.astro';\n\nimport Logo from './Logo.astro';\n\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n\n---\n\n<div id=\"content-wrapper\">\n\n  <Header />\n\n  <slot name=\"after-header\" />  <!--  children with the `slot=\"after-header\"` attribute will go here -->\n\n  <Logo />\n\n  <h1>{title}</h1>\n\n  <slot />  <!--  children without a `slot`, or with `slot=\"default\"` attribute will go here -->\n\n  <Footer />\n\n  <slot name=\"after-footer\" />  <!--  children with the `slot=\"after-footer\"` attribute will go here -->\n\n</div>\n```\n\nTo inject HTML content into a particular slot, use the `slot` attribute on any child element to specify the name of the slot. All other child elements of the component will be injected into the default (unnamed) `<slot />`.\n\n```\n\n---\n\nimport Wrapper from '../components/Wrapper.astro';\n\n---\n\n<Wrapper title=\"Fred's Page\">\n\n  <img src=\"https://my.photo/fred.jpg\" slot=\"after-header\" />\n\n  <h2>All about Fred</h2>\n\n  <p>Here is some stuff about Fred.</p>\n\n  <p slot=\"after-footer\">Copyright 2022</p>\n\n</Wrapper>\n```\n\nTo pass multiple HTML elements into a component‚Äôs `<slot/>` placeholder without a wrapping `<div>`, use the `slot=\"\"` attribute on [Astro‚Äôs `<Fragment/>` component](/en/reference/api-reference/#fragment-):\n\n```\n\n---\n\n// Create a custom table with named slot placeholders for head and body content\n\n---\n\n<table class=\"bg-white\">\n\n  <thead class=\"sticky top-0 bg-white\"><slot name=\"header\" /></thead>\n\n  <tbody class=\"[&_tr:nth-child(odd)]:bg-gray-100\"><slot name=\"body\" /></tbody>\n\n</table>\n```\n\nInject multiple rows and columns of HTML content using a `slot=\"\"` attribute to specify the `\"header\"` and `\"body\"` content. Individual HTML elements can also be styled:\n\n```\n\n---\n\nimport CustomTable from './CustomTable.astro';\n\n---\n\n<CustomTable>\n\n  <Fragment slot=\"header\"> <!-- pass table header -->\n\n    <tr><th>Product name</th><th>Stock units</th></tr>\n\n  </Fragment>\n\n  <Fragment slot=\"body\"> <!-- pass table body -->\n\n    <tr><td>Flip-flops</td><td>64</td></tr>\n\n    <tr><td>Boots</td><td>32</td></tr>\n\n    <tr><td>Sneakers</td><td class=\"text-red-500\">0</td></tr>\n\n  </Fragment>\n\n</CustomTable>\n```\n\nNote that named slots must be an immediate child of the component. You cannot pass named slots through nested elements.\n\n### Fallback Content for Slots\n\n[Section titled Fallback Content for Slots](#fallback-content-for-slots)\n\nSlots can also render **fallback content**. When there are no matching children passed to a slot, a `<slot />` element will render its own placeholder children.\n\n```\n\n---\n\nimport Header from './Header.astro';\n\nimport Logo from './Logo.astro';\n\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n\n---\n\n<div id=\"content-wrapper\">\n\n  <Header />\n\n  <Logo />\n\n  <h1>{title}</h1>\n\n  <slot>\n\n    <p>This is my fallback content, if there is no child passed into slot</p>\n\n  </slot>\n\n  <Footer />\n\n</div>\n```\n\nFallback content will only be displayed when there are no matching elements with the slot=‚Äúname‚Äù attribute being passed in to a named slot.\n\nAstro will pass an empty slot when a slot element exists but has no content to pass. Fallback content cannot be used as a default when an empty slot is passed. Fallback content is only displayed when no slot element can be found.\n\n### Transferring slots\n\n[Section titled Transferring slots](#transferring-slots)\n\nSlots can be transferred to other components. For example, when creating nested layouts:\n\n```\n\n---\n\n---\n\n<html lang=\"en\">\n\n  <head>\n\n    <meta charset=\"utf-8\" />\n\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n    <meta name=\"viewport\" content=\"width=device-width\" />\n\n    <meta name=\"generator\" content={Astro.generator} />\n\n    <slot name=\"head\" />\n\n  </head>\n\n  <body>\n\n    <slot />\n\n  </body>\n\n</html>\n```\n\n```\n\n---\n\nimport BaseLayout from './BaseLayout.astro';\n\n---\n\n<BaseLayout>\n\n  <slot name=\"head\" slot=\"head\" />\n\n  <slot />\n\n</BaseLayout>\n```\n\nNow, the default and `head` slots passed to `HomeLayout` will be transferred to the `BaseLayout` parent\n\n```\n\n---\n\nimport HomeLayout from '../layouts/HomeLayout.astro';\n\n---\n\n<HomeLayout>\n\n  <title slot=\"head\">Astro</title>\n\n  <h1>Astro</h1>\n\n</HomeLayout>\n```\n\n## HTML Components\n\n[Section titled HTML Components](#html-components)\n\nAstro supports importing and using `.html` files as components or placing these files within the `src/pages/` subdirectory as pages. You may want to use HTML components if you‚Äôre reusing code from an existing site built without a framework, or if you want to ensure that your component has no dynamic features.\n\nHTML components must contain only valid HTML, and therefore lack key Astro component features:\n\n- They don‚Äôt support frontmatter, server-side imports, or dynamic expressions.\n- Any `<script>` tags are left unbundled, treated as if they had `is:inline`.\n- They can only [reference assets that are in the `public/` folder](/en/basics/project-structure/#public).\n\n## Next Steps\n\n[Section titled Next Steps](#next-steps)\n\nRead more about using [UI framework components](/en/guides/framework-components/) in your Astro project.\n\nLearn\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/basics/astro-components/",
      "title": "Components | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/basics/astro-components.webp",
      "ogTitle": "Components",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/basics/astro-components/",
      "ogSiteName": "Docs",
      "description": "An intro to the .astro component syntax.",
      "ogDescription": "An intro to the .astro component syntax.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Project Structure\n\nYour new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro‚Äôs existing file structure.\n\nHere‚Äôs how an Astro project is organized, and some files you will find in your new project.\n\n## Directories and Files\n\n[Section titled Directories and Files](#directories-and-files)\n\nAstro leverages an opinionated folder layout for your project. Every Astro project root should include the following directories and files:\n\n- `src/*` \\- Your project source code (components, pages, styles, etc.)\n- `public/*` \\- Your non-code, unprocessed assets (fonts, icons, etc.)\n- `package.json` \\- A project manifest.\n- `astro.config.mjs` \\- An Astro configuration file. (recommended)\n- `tsconfig.json` \\- A TypeScript configuration file. (recommended)\n\n### Example Project Tree\n\n[Section titled Example Project Tree](#example-project-tree)\n\nA common Astro project directory might look like this:\n\n- Directorypublic/\n\n\n- robots.txt\n- favicon.svg\n- social-image.png\n\n- Directorysrc/\n\n\n- Directorycomponents/\n\n\n- Header.astro\n- Button.jsx\n\n- Directorylayouts/\n\n\n- PostLayout.astro\n\n- Directorypages/\n\n\n- Directoryposts/\n\n\n- post1.md\n- post2.md\n- post3.md\n\n- index.astro\n\n- Directorystyles/\n\n\n- global.css\n\n- astro.config.mjs\n- package.json\n- tsconfig.json\n\n### `src/`\n\n[Section titled src/](#src)\n\nThe `src/` folder is where most of your project source code lives. This includes:\n\n- [Pages](/en/basics/astro-pages/)\n- [Layouts](/en/basics/layouts/)\n- [Astro components](/en/basics/astro-components/)\n- [UI framework components (React, etc.)](/en/guides/framework-components/)\n- [Styles (CSS, Sass)](/en/guides/styling/)\n- [Markdown](/en/guides/markdown-content/)\n\nAstro processes, optimizes, and bundles your `src/` files to create the final website that is shipped to the browser. Unlike the static `public/` directory, your `src/` files are built and handled for you by Astro.\n\nSome files (like Astro components) are not even sent to the browser as written but are instead rendered to static HTML. Other files (like CSS) are sent to the browser but may be optimized or bundled with other CSS files for performance.\n\n### `src/components`\n\n[Section titled src/components](#srccomponents)\n\n**Components** are reusable units of code for your HTML pages. These could be [Astro components](/en/basics/astro-components/), or [UI framework components](/en/guides/framework-components/) like React or Vue. It is common to group and organize all of your project components together in this folder.\n\nThis is a common convention in Astro projects, but it is not required. Feel free to organize your components however you like!\n\n### `src/content`\n\n[Section titled src/content](#srccontent)\n\nThe `src/content/` directory is reserved to store [content collections](/en/guides/content-collections/) and an optional collections configuration file. No other files are allowed inside this folder.\n\n### `src/layouts`\n\n[Section titled src/layouts](#srclayouts)\n\n[Layouts](/en/basics/layouts/) are Astro components that define the UI structure shared by one or more [pages](/en/basics/astro-pages/).\n\nJust like `src/components`, this directory is a common convention but not required.\n\n### `src/pages`\n\n[Section titled src/pages](#srcpages)\n\n[Pages](/en/basics/astro-pages/) are a special kind of component used to create new pages on your site. A page can be an Astro component, or a Markdown file that represents some page of content for your site.\n\n### `src/styles`\n\n[Section titled src/styles](#srcstyles)\n\nIt is a common convention to store your CSS or Sass files in a `src/styles` directory, but this is not required. As long as your styles live somewhere in the `src/` directory and are imported correctly, Astro will handle and optimize them.\n\n### `public/`\n\n[Section titled public/](#public)\n\nThe `public/` directory is for files and assets in your project that do not need to be processed during Astro‚Äôs build process. The files in this folder will be copied into the build folder untouched, and then your site will be built.\n\nThis behavior makes `public/` ideal for common assets like images and fonts, or special files such as `robots.txt` and `manifest.webmanifest`.\n\nYou can place CSS and JavaScript in your `public/` directory, but be aware that those files will not be bundled or optimized in your final build.\n\n### `package.json`\n\n[Section titled package.json](#packagejson)\n\nThis is a file used by JavaScript package managers to manage your dependencies. It also defines the scripts that are commonly used to run Astro (ex: `npm start`, `npm run build`).\n\nThere are [two kinds of dependencies](https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file) you can specify in a `package.json`: `dependencies` and `devDependencies`. In most cases, these work the same: Astro needs all dependencies at build time, and your package manager will install both. We recommend putting all of your dependencies in `dependencies` to start, and only use `devDependencies` if you find a specific need to do so.\n\nFor help creating a new `package.json` file for your project, check out the [manual setup](/en/install-and-setup/#manual-setup) instructions.\n\n### `astro.config.mjs`\n\n[Section titled astro.config.mjs](#astroconfigmjs)\n\nThis file is generated in every starter template and includes configuration options for your Astro project. Here you can specify integrations to use, build options, server options, and more.\n\nAstro supports several file formats for its JavaScript configuration file: `astro.config.js`, `astro.config.mjs`, `astro.config.cjs` and `astro.config.ts`. We recommend using `.mjs` in most cases or `.ts` if you want to write TypeScript in your config file.\n\nTypeScript config file loading is handled using [`tsm`](https://github.com/lukeed/tsm) and will respect your project‚Äôs `tsconfig` options.\n\nSee the [Configuring Astro Guide](/en/guides/configuring-astro/) for details on setting configurations.\n\n### `tsconfig.json`\n\n[Section titled tsconfig.json](#tsconfigjson)\n\nThis file is generated in every starter template and includes TypeScript configuration options for your Astro project. Some features (like npm package imports) aren‚Äôt fully supported in the editor without a `tsconfig.json` file.\n\nSee the [TypeScript Guide](/en/guides/typescript/) for details on setting configurations.\n\nLearn\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)\n\n![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fbasics%2Fproject-structure%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=42448773)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/basics/project-structure/",
      "title": "Project Structure | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/basics/project-structure.webp",
      "ogTitle": "Project Structure",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/basics/project-structure/",
      "ogSiteName": "Docs",
      "description": "Learn how to structure a project with Astro.",
      "ogDescription": "Learn how to structure a project with Astro.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Why Astro?\n\n**Astro** is the web framework for building **content-driven websites** like blogs, marketing, and e-commerce. Astro is best-known for pioneering a new [frontend architecture](/en/concepts/islands/) to reduce JavaScript overhead and complexity compared to other frameworks. If you need a website that loads fast and has great SEO, then Astro is for you.\n\n## Features\n\n[Section titled Features](#features)\n\n**Astro is an all-in-one web framework.** It includes everything you need to create a website, built-in. There are also hundreds of different [integrations](https://astro.build/integrations/) and [API hooks](/en/reference/integrations-reference/) available to customize a project to your exact use case and needs.\n\nSome highlights include:\n\n- **[Islands](/en/concepts/islands/):** A component-based web architecture optimized for content-driven websites.\n- **[UI-agnostic](/en/guides/framework-components/):** Supports React, Preact, Svelte, Vue, Solid, Lit, HTMX, web components, and more.\n- **[Server-first](/en/basics/rendering-modes/):** Moves expensive rendering off of your visitors‚Äô devices.\n- **[Zero JS, by default](/en/basics/astro-components/):** Less client-side JavaScript to slow your site down.\n- **[Content collections](/en/guides/content-collections/):** Organize, validate, and provide TypeScript type-safety for your Markdown content.\n- **[Customizable](/en/guides/integrations-guide/):** Tailwind, MDX, and hundreds of integrations to choose from.\n\n## Design Principles\n\n[Section titled Design Principles](#design-principles)\n\nHere are five core design principles to help explain why we built Astro, the problems that it exists to solve, and why Astro may be the best choice for your project or team.\n\nAstro is‚Ä¶\n\n1. **[Content-driven](#content-driven):** Astro was designed to showcase your content.\n2. **[Server-first](#server-first):** Websites run faster when they render HTML on the server.\n3. **[Fast by default](#fast-by-default):** It should be impossible to build a slow website in Astro.\n4. **[Easy to use](#easy-to-use):** You don‚Äôt need to be an expert to build something with Astro.\n5. **[Developer-focused](#developer-focused):** You should have the resources you need to be successful.\n\n### Content-driven\n\n[Section titled Content-driven](#content-driven)\n\n**Astro was designed for building content-rich websites.** This includes marketing sites, publishing sites, documentation sites, blogs, portfolios, landing pages, community sites, and e-commerce sites. If you have content to show, it needs to reach your reader quickly.\n\nBy contrast, most modern web frameworks were designed for building _web applications_. These frameworks excel at building more complex, application-like experiences in the browser: logged-in admin dashboards, inboxes, social networks, todo lists, and even native-like applications like [Figma](https://figma.com/) and [Ping](https://ping.gg/). However with that complexity, they can struggle to provide great performance when delivering your content.\n\nAstro‚Äôs focus on content from its beginnings as a static site builder have allowed Astro to **sensibly scale up to performant, powerful, dynamic web applications** that still respect your content and your audience. Astro‚Äôs unique focus on content lets Astro make tradeoffs and deliver unmatched performance features that wouldn‚Äôt make sense for more application-focused web frameworks to implement.\n\n### Server-first\n\n[Section titled Server-first](#server-first)\n\n**Astro leverages [server-rendering](/en/basics/rendering-modes/) over client-side rendering in the browser as much as possible.** This is the same approach that traditional server-side frameworks -- PHP, WordPress, Laravel, Ruby on Rails, etc. -- have been using for decades. But you don‚Äôt need to learn a second server-side language to unlock it. With Astro, everything is still just HTML, CSS, and JavaScript (or TypeScript, if you prefer).\n\nThis approach stands in contrast to other modern JavaScript web frameworks like Next.js, SvelteKit, Nuxt, Remix, and others. These frameworks were built for client-side rendering of your entire website and include server-side rendering mainly to address performance concerns. This approach has been dubbed the **Single-Page App (SPA)**, in contrast with Astro‚Äôs **Multi-Page App (MPA)** approach.\n\nThe SPA model has its benefits. However, these come at the expense of additional complexity and performance tradeoffs. These tradeoffs harm page performance -- critical metrics like [Time to Interactive (TTI)](https://web.dev/interactive/) \\-\\- which doesn‚Äôt make much sense for content-focused websites where first-load performance is essential.\n\nAstro‚Äôs server-first approach allows you to opt in to client-side rendering only if, and exactly as, necessary. You can choose to add UI framework components that run on the client. You can take advantage of Astro‚Äôs view transitions router for finer control over select page transitions and animations. Astro‚Äôs server-first rendering, either pre-rendered or on-demand, provides performant defaults that you can enhance and extend.\n\n### Fast by default\n\n[Section titled Fast by default](#fast-by-default)\n\nGood performance is always important, but it is _especially_ critical for websites whose success depends on displaying your content. It has been well-proven that poor performance loses you engagement, conversions, and money. For example:\n\n- Every 100ms faster ‚Üí 1% more conversions ( [Mobify](https://web.dev/why-speed-matters/), earning +$380,000/yr)\n- 50% faster ‚Üí 12% more sales ( [AutoAnything](https://www.digitalcommerce360.com/2010/08/19/web-accelerator-revs-conversion-and-sales-autoanything/))\n- 20% faster ‚Üí 10% more conversions ( [Furniture Village](https://www.thinkwithgoogle.com/intl/en-gb/marketing-strategies/app-and-mobile/furniture-village-and-greenlight-slash-page-load-times-boosting-user-experience/))\n- 40% faster ‚Üí 15% more sign-ups ( [Pinterest](https://medium.com/pinterest-engineering/driving-user-growth-with-performance-improvements-cfc50dafadd7))\n- 850ms faster ‚Üí 7% more conversions ( [COOK](https://web.dev/why-speed-matters/))\n- Every 1 second slower ‚Üí 10% fewer users ( [BBC](https://www.creativebloq.com/features/how-the-bbc-builds-websites-that-scale))\n\nIn many web frameworks, it is easy to build a website that looks great during development only to load painfully slow once deployed. JavaScript is often the culprit, since many phones and lower-powered devices rarely match the speed of a developer‚Äôs laptop.\n\nAstro‚Äôs magic is in how it combines the two values explained above -- a content focus with a server-first architecture -- to make tradeoffs and deliver features that other frameworks cannot. The result is amazing web performance for every website, out of the box. Our goal: **It should be nearly impossible to build a slow website with Astro.**\n\nAn Astro website can [load 40% faster with 90% less JavaScript](https://twitter.com/t3dotgg/status/1437195415439360003) than the same site built with the most popular React web framework. But don‚Äôt take our word for it: watch Astro‚Äôs performance leave Ryan Carniato (creator of Solid.js and Marko) [speechless](https://youtu.be/2ZEMb_H-LYE?t=8163).\n\n### Easy to use\n\n[Section titled Easy to use](#easy-to-use)\n\n**Astro‚Äôs goal is to be accessible to every web developer.** Astro was designed to feel familiar and approachable regardless of skill level or past experience with web development.\n\nThe `.astro` UI language is a superset of HTML: any valid HTML is valid Astro templating syntax! So, if you can write HTML, you can write Astro components! But, it also combines some of our favorite features borrowed from other component languages like JSX expressions (React) and CSS scoping by default (Svelte and Vue). This closeness to HTML also makes it easier to use progressive enhancement and common accessibility patterns without any overhead.\n\nWe then made sure that you could also use your favorite UI component languages that you already know, and even reuse components you might already have. React, Preact, Svelte, Vue, Solid, Lit, and others, including web components, are all supported for authoring UI components in an Astro project.\n\nAstro was designed to be less complex than other UI frameworks and languages. One big reason for this is that Astro was designed to render on the server, not in the browser. That means that you don‚Äôt need to worry about: hooks (React), stale closures (also React), refs (Vue), observables (Svelte), atoms, selectors, reactions, or derivations. There is no reactivity on the server, so all of that complexity melts away.\n\nOne of our favorite sayings is: **opt in to complexity.** We designed Astro to remove as much ‚Äúrequired complexity‚Äù as possible from the developer experience, especially as you onboard for the first time. You can build a ‚ÄúHello World‚Äù example website in Astro with just HTML and CSS. Then, when you need to build something more powerful, you can incrementally reach for new features and APIs as you go.\n\n### Developer-focused\n\n[Section titled Developer-focused](#developer-focused)\n\nWe strongly believe that Astro is only a successful project if people love using it. Astro has everything you need to support you as you build with Astro.\n\nAstro invests in developer tools like a great CLI experience from the moment you open your terminal, an official VS Code extension for syntax highlighting, TypeScript and Intellisense, and documentation actively maintained by hundreds of community contributors and available in 14 languages.\n\nOur welcoming, respectful, inclusive community on Discord is ready to provide support, motivation, and encouragement. Open a `#support` thread to get help with your project. Visit our dedicated `#showcase` channel for sharing your Astro sites, blog posts, videos, and even work-in-progress for safe feedback and constructive criticism. Participate in regular live events such as our weekly community call, ‚ÄúTalking and Doc‚Äôing,‚Äù and API/bug bashes.\n\nAs an open-source project, we welcome contributions of all types and sizes from community members of all experience levels. You are invited to join in roadmap discussions to shape the future of Astro, and we hope you‚Äôll contribute fixes and features to the core codebase, compiler, docs, language tools, websites, and other projects.\n\nLearn\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)\n\n![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fconcepts%2Fwhy-astro%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=73186529)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/concepts/why-astro/",
      "title": "Why Astro? | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/concepts/why-astro.webp",
      "ogTitle": "Why Astro?",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/concepts/why-astro/",
      "ogSiteName": "Docs",
      "description": "Astro is the web framework for building content-driven websites like blogs, marketing, and e-commerce. Learn why Astro might be a good choice for your next website.",
      "ogDescription": "Astro is the web framework for building content-driven websites like blogs, marketing, and e-commerce. Learn why Astro might be a good choice for your next website.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Astro Islands\n\nAstro pioneered and popularized a frontend architecture called **Islands.** Islands architecture results in better frontend performance by helping you avoid monolithic JavaScript patterns and stripping all non-essential JavaScript from the page automatically. Developers keep using their favorite UI components and frameworks with Astro and still get these benefits.\n\n## A brief history\n\n[Section titled A brief history](#a-brief-history)\n\nThe term ‚Äúcomponent island‚Äù was first coined by Etsy‚Äôs frontend architect [Katie Sylor-Miller](https://twitter.com/ksylor) in 2019. This idea was then expanded on and documented in [this post](https://jasonformat.com/islands-architecture/) by Preact creator Jason Miller on August 11, 2020.\n\n> The general idea of an ‚ÄúIslands‚Äù architecture is deceptively simple: render HTML pages on the server, and inject placeholders or slots around highly dynamic regions \\[‚Ä¶\\] that can then be ‚Äúhydrated‚Äù on the client into small self-contained widgets, reusing their server-rendered initial HTML.\n>\n> ‚Äî Jason Miller, Creator of Preact\n\nThe technique that this architectural pattern builds on is also known as **partial** or **selective hydration.**\n\nIn contrast, most JavaScript-based web frameworks hydrate & render an entire website as one large JavaScript application (also known as a single-page application, or SPA). SPAs provide simplicity and power but suffer from page-load performance problems due to heavy client-side JavaScript usage.\n\nSPAs have their place, even [embedded inside an Astro page](/en/guides/migrate-to-astro/from-create-react-app/). But, SPAs lack the native ability to selectively and strategically hydrate, making them a heavy-handed choice for most projects on the web today.\n\nAstro became popular as the first mainstream JavaScript web framework with selective hydration built-in, using that component islands pattern first coined by Sylor-Miller.\n\n## What is an island?\n\n[Section titled What is an island?](#what-is-an-island)\n\n**In Astro, an ‚Äúisland‚Äù refers to any interactive UI component on the page.** Think of an island as an interactive widget floating in a sea of otherwise static, lightweight, server-rendered HTML.\n\nStatic content like text, images, etc.\n\nImage carousel (interactive island)\n\nSource: [Islands Architecture: Jason Miller](https://jasonformat.com/islands-architecture/)\n\nAn island always runs in isolation from other islands on the page, and multiple islands can exist on a page. Islands can still share state and communicate with each other, even though they run in different component contexts.\n\nThis flexibility allows Astro to support multiple UI frameworks like [React](https://react.dev/), [Preact](https://preactjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), and [SolidJS](https://www.solidjs.com/). Because they are independent, you can even mix several frameworks on each page.\n\n## Creating an island\n\n[Section titled Creating an island](#creating-an-island)\n\nBy default, Astro will automatically render every UI component to just HTML & CSS, **stripping out all client-side JavaScript automatically.**\n\n```\n\n<MyReactComponent />\n```\n\nThis may sound strict, but this behavior is what keeps Astro websites fast by default and protects developers from accidentally sending unnecessary or unwanted JavaScript that might slow down their website.\n\nTurning any static UI component into an interactive island requires only a `client:*` directive. Astro then automatically builds and bundles your client-side JavaScript for optimized performance.\n\n```\n\n<!-- This component is now interactive on the page!\n\n     The rest of your website remains static. -->\n\n<MyReactComponent client:load />\n```\n\nWith islands, client-side JavaScript is only loaded for the explicit interactive components that you mark using `client:*` directives.\n\nAnd because interaction is configured at the component-level, you can handle different loading priorities for each component based on its usage. For example, `client:idle` tells a component to load when the browser becomes idle, and `client:visible` tells a component to load only once it enters the viewport.\n\n## What are the benefits of Islands?\n\n[Section titled What are the benefits of Islands?](#what-are-the-benefits-of-islands)\n\nThe most obvious benefit of building with Astro Islands is performance: the majority of your website is converted to fast, static HTML and JavaScript is only loaded for the individual components that need it. JavaScript is one of the slowest assets that you can load per-byte, so every byte counts.\n\nAnother benefit is parallel loading. In the example illustration above, the low-priority ‚Äúimage carousel‚Äù island doesn‚Äôt need to block the high-priority ‚Äúheader‚Äù island. The two load in parallel and hydrate in isolation, meaning that the header becomes interactive immediately without having to wait for the heavier carousel lower down the page.\n\nEven better, you can tell Astro exactly how and when to render each component. If that image carousel is really expensive to load, you can attach a special [client directive](/en/reference/directives-reference/#client-directives) that tells Astro to only load the carousel when it becomes visible on the page. If the user never sees it, it never loads.\n\nIn Astro, it‚Äôs up to you as the developer to explicitly tell Astro which components on the page need to also run in the browser. Astro will only hydrate exactly what‚Äôs needed on the page and leave the rest of your site as static HTML.\n\n**Islands are the secret to Astro‚Äôs fast-by-default performance story!**\n\nLearn\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/concepts/islands/",
      "title": "Astro Islands | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/concepts/islands.webp",
      "ogTitle": "Astro Islands",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/concepts/islands/",
      "ogSiteName": "Docs",
      "description": "Astro Islands (aka Component Islands) are a pattern of web architecture pioneered by Astro. ‚ÄúIslands architecture‚Äù was first coined by Etsy's frontend architect Katie Sylor-Miller in 2019, and expanded on by Preact creator Jason Miller.",
      "ogDescription": "Astro Islands (aka Component Islands) are a pattern of web architecture pioneered by Astro. ‚ÄúIslands architecture‚Äù was first coined by Etsy's frontend architect Katie Sylor-Miller in 2019, and expanded on by Preact creator Jason Miller.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Migrate an existing project to Astro\n\n**Ready to convert your site to Astro?** See one of our guides for migration tips.\n\n## Migration Guides\n\n[Section titled Migration Guides](#migration-guides)\n\n- ![](https://docs.astro.build/logos/create-react-app.svg)\n\n\n\n### [Create React App](/en/guides/migrate-to-astro/from-create-react-app/)\n\n- ![](https://docs.astro.build/logos/docusaurus.svg)\n\n\n\n### [Docusaurus](/en/guides/migrate-to-astro/from-docusaurus/)\n\n- ![](https://docs.astro.build/logos/eleventy.svg)\n\n\n\n### [Eleventy](/en/guides/migrate-to-astro/from-eleventy/)\n\n- ![](https://docs.astro.build/logos/gatsby.svg)\n\n\n\n### [Gatsby](/en/guides/migrate-to-astro/from-gatsby/)\n\n- ![](https://docs.astro.build/logos/gitbook.svg)\n\n\n\n### [GitBook](/en/guides/migrate-to-astro/from-gitbook/)\n\n- ![](https://docs.astro.build/logos/gridsome.svg)\n\n\n\n### [Gridsome](/en/guides/migrate-to-astro/from-gridsome/)\n\n- ![](https://docs.astro.build/logos/hugo.svg)\n\n\n\n### [Hugo](/en/guides/migrate-to-astro/from-hugo/)\n\n- ![](https://docs.astro.build/logos/jekyll.png)\n\n\n\n### [Jekyll](/en/guides/migrate-to-astro/from-jekyll/)\n\n- ![](https://docs.astro.build/logos/nextjs.svg)\n\n\n\n### [Next.js](/en/guides/migrate-to-astro/from-nextjs/)\n\n- ![](https://docs.astro.build/logos/nuxtjs.svg)\n\n\n\n### [NuxtJS](/en/guides/migrate-to-astro/from-nuxtjs/)\n\n- ![](https://docs.astro.build/logos/pelican.svg)\n\n\n\n### [Pelican](/en/guides/migrate-to-astro/from-pelican/)\n\n- ![](https://docs.astro.build/logos/sveltekit.svg)\n\n\n\n### [SvelteKit](/en/guides/migrate-to-astro/from-sveltekit/)\n\n- ![](https://docs.astro.build/logos/vuepress.png)\n\n\n\n### [VuePress](/en/guides/migrate-to-astro/from-vuepress/)\n\n- ![](https://docs.astro.build/logos/wordpress.svg)\n\n\n\n### [WordPress](/en/guides/migrate-to-astro/from-wordpress/)\n\n\nNote that many of these pages are **stubs**: they‚Äôre collections of resources waiting for your contribution!\n\n## Why migrate your site to Astro?\n\n[Section titled Why migrate your site to Astro?](#why-migrate-your-site-to-astro)\n\nAstro provides many benefits: performance, simplicity, and many of the features you want built right into the framework. When you do need to extend your site, Astro provides several [official and 3rd-party community integrations](https://astro.build/integrations).\n\nMigrating may be less work than you think!\n\nDepending on your existing project, you may be able to use your existing:\n\n- [UI framework components](/en/guides/framework-components/) directly in Astro.\n\n- [CSS stylesheets or libraries](/en/guides/styling/) including Tailwind.\n\n- [Markdown/MDX files](/en/guides/markdown-content/), configured using your existing [remark and rehype plugins](/en/guides/markdown-content/#markdown-plugins).\n\n- [Content from a CMS](/en/guides/cms/) through an integration or API.\n\n\n## Which projects can I convert to Astro?\n\n[Section titled Which projects can I convert to Astro?](#which-projects-can-i-convert-to-astro)\n\n[Many existing sites can be built with Astro](/en/concepts/why-astro/). Astro is ideally suited for your existing content-based sites like blogs, landing pages, marketing sites and portfolios. Astro integrates with several popular headless CMSs, and allows you to connect eCommerce shop carts.\n\nAstro allows you to choose between a statically-generated site and [server-side rendering (SSR)](/en/guides/server-side-rendering/), making it a great replacement for SSGs or for sites that need to fetch some page data on the fly.\n\n## How will my project design change?\n\n[Section titled How will my project design change?](#how-will-my-project-design-change)\n\nDepending on your existing project, you may need to think differently about:\n\n- Designing in [Astro Islands](/en/concepts/islands/#what-is-an-island) to avoid sending unnecessary JavaScript to the browser.\n\n- Providing client-side interactivity with [client-side `<script>` tags](/en/guides/client-side-scripts/) or [UI framework components](/en/guides/framework-components/).\n\n- Managing [shared state](/en/recipes/sharing-state-islands/) with Nano Stores or local storage instead of app-wide hooks or wrappers.\n\n\nRecipes\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)\n\n![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fmigrate-to-astro%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=10794693)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/guides/migrate-to-astro/",
      "title": "Migrate an existing project to Astro | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/guides/migrate-to-astro.webp",
      "ogTitle": "Migrate an existing project to Astro",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/guides/migrate-to-astro/",
      "ogSiteName": "Docs",
      "description": "Some tips and tricks for converting your site to Astro.",
      "ogDescription": "Some tips and tricks for converting your site to Astro.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Deploy your Astro Site\n\n**Ready to build and deploy your Astro site?** Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.\n\n## Deployment Guides\n\n[Section titled Deployment Guides](#deployment-guides)\n\n- ![](https://docs.astro.build/logos/netlify.svg)\n\n\n\n### [Netlify](/en/guides/deploy/netlify/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/vercel.svg)\n\n\n\n### [Vercel](/en/guides/deploy/vercel/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/deno.svg)\n\n\n\n### [Deno Deploy](/en/guides/deploy/deno/)\n\n\n\nSSR\n\n- ![](https://docs.astro.build/logos/github.svg)\n\n\n\n### [GitHub Pages](/en/guides/deploy/github/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/gitlab.svg)\n\n\n\n### [GitLab Pages](/en/guides/deploy/gitlab/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/cloudflare-pages.svg)\n\n\n\n### [Cloudflare Pages](/en/guides/deploy/cloudflare/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/aws.svg)\n\n\n\n### [AWS](/en/guides/deploy/aws/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/flightcontrol.svg)\n\n\n\n### [AWS via Flightcontrol](/en/guides/deploy/flightcontrol/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/sst.svg)\n\n\n\n### [AWS via SST](/en/guides/deploy/sst/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/azion.svg)\n\n\n\n### [Azion](/en/guides/deploy/azion/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/google-cloud.svg)\n\n\n\n### [Google Cloud](/en/guides/deploy/google-cloud/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/firebase.svg)\n\n\n\n### [Firebase Hosting](/en/guides/deploy/google-firebase/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/heroku.svg)\n\n\n\n### [Heroku](/en/guides/deploy/heroku/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/microsoft-azure.svg)\n\n\n\n### [Microsoft Azure](/en/guides/deploy/microsoft-azure/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/buddy.svg)\n\n\n\n### [Buddy](/en/guides/deploy/buddy/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/edgio.svg)\n\n\n\n### [Edgio](/en/guides/deploy/edgio/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/flyio.svg)\n\n\n\n### [Fly.io](/en/guides/deploy/flyio/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/render.svg)\n\n\n\n### [Render](/en/guides/deploy/render/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/stormkit.svg)\n\n\n\n### [Stormkit](/en/guides/deploy/stormkit/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/surge.svg)\n\n\n\n### [Surge](/en/guides/deploy/surge/)\n\n\n\nStatic\n\n- ![](https://docs.astro.build/logos/cleavr.svg)\n\n\n\n### [Cleavr](/en/guides/deploy/cleavr/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/kinsta.svg)\n\n\n\n### [Kinsta](/en/guides/deploy/kinsta/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/zeabur.svg)\n\n\n\n### [Zeabur](/en/guides/deploy/zeabur/)\n\n\n\nSSRStatic\n\n- ![](https://docs.astro.build/logos/zerops.svg)\n\n\n\n### [Zerops](/en/guides/deploy/zerops/)\n\n\n\nSSRStatic\n\n\n## Quick Deploy Options\n\n[Section titled Quick Deploy Options](#quick-deploy-options)\n\nYou can build and deploy an Astro site to a number of hosts quickly using either their website‚Äôs dashboard UI or a CLI.\n\n### Website UI\n\n[Section titled Website UI](#website-ui)\n\nA quick way to deploy your website is to connect your Astro project‚Äôs online Git repository (e.g. GitHub, GitLab, Bitbucket) to a host provider and take advantage of continuous deployment using Git.\n\nThese host platforms automatically detect pushes to your Astro project‚Äôs source repository, build your site and deploy it to the web at a custom URL or your personal domain. Often, setting up a deployment on these platforms will follow steps something like the following:\n\n1. Add your repository to an online Git provider (e.g. in GitHub, GitLab, Bitbucket)\n\n2. Choose a host that supports **continuous deployment** (e.g. [Netlify](/en/guides/deploy/netlify/) or [Vercel](/en/guides/deploy/vercel/)) and import your Git repository as a new site/project.\n\nMany common hosts will recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy your site as shown below. (If not, these settings can be changed.)\n\n3. Click ‚ÄúDeploy‚Äù and your new website will be created at a unique URL for that host (e.g. `new-astro-site.netlify.app`).\n\n\nThe host will be automatically configured to watch your Git provider‚Äôs main branch for changes, and to rebuild and republish your site at each new commit. These settings can typically be configured in your host provider‚Äôs dashboard UI.\n\n### CLI Deployment\n\n[Section titled CLI Deployment](#cli-deployment)\n\nSome hosts will have their own command line interface (CLI) you can install globally to your machine using npm. Often, using a CLI to deploy looks something like the following:\n\n1. Install your host‚Äôs CLI globally, for example:\n\n\n\n\n- [npm](#tab-panel-223)\n- [pnpm](#tab-panel-224)\n- [Yarn](#tab-panel-225)\n\n```\n\nnpm install --global netlify-cli\n```\n\n```\n\npnpm add --global netlify-cli\n```\n\n```\n\nyarn global add netlify-cli\n```\n\n2. Run the CLI and follow any instructions for authorization, setup etc.\n\n3. Build your site and deploy to your host\n\nMany common hosts will build and deploy your site for you. They will usually recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy as shown below. (If not, these settings can be changed.)\n\nOther hosts will require you to [build your site locally](#building-your-site-locally) and deploy using the command line.\n\n\n## Building Your Site Locally\n\n[Section titled Building Your Site Locally](#building-your-site-locally)\n\nMany hosts like Netlify and Vercel will build your site for you and then publish that build output to the web. But, some sites will require you to build locally and then run a deploy command or upload your build output.\n\nYou may also wish to build locally to preview your site, or to catch any potential errors and warnings in your own environment.\n\nRun the command `npm run build` to build your Astro site.\n\n- [npm](#tab-panel-226)\n- [pnpm](#tab-panel-227)\n- [Yarn](#tab-panel-228)\n\n```\n\nnpm run build\n```\n\n```\n\npnpm run build\n```\n\n```\n\nyarn run build\n```\n\nBy default, the build output will be placed at `dist/`. This location can be changed using the [`outDir` configuration option](/en/reference/configuration-reference/#outdir).\n\n## Adding an Adapter for SSR\n\n[Section titled Adding an Adapter for SSR](#adding-an-adapter-for-ssr)\n\nRecipes\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)\n\n![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fguides%2Fdeploy%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=15008754)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/guides/deploy/",
      "title": "Deploy your Astro Site | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/guides/deploy.webp",
      "ogTitle": "Deploy your Astro Site",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/guides/deploy/",
      "ogSiteName": "Docs",
      "description": "How to deploy your Astro site to the web.",
      "ogDescription": "How to deploy your Astro site to the web.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Install and set up Astro\n\nThe [`create astro` CLI command](#install-from-the-cli-wizard) is the fastest way to start a new Astro project from scratch. It will walk you through every step of setting up your new Astro project and allow you to choose from a few different official starter templates.\n\nOr, you can begin your project [using any existing theme or starter template](#use-a-theme-or-starter-template).\n\nTo install Astro manually instead, see our [step-by-step manual installation guide](#manual-setup).\n\n## Prerequisites\n\n[Section titled Prerequisites](#prerequisites)\n\n- **Node.js** \\- `v18.17.1` or `v20.3.0` or higher. ( `v19` is not supported.)\n- **Text editor** \\- We recommend [VS Code](https://code.visualstudio.com/) with our [Official Astro extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode).\n- **Terminal** \\- Astro is accessed through its command-line interface (CLI).\n\n## Browser compatibility\n\n[Section titled Browser compatibility](#browser-compatibility)\n\nAstro is built with Vite which targets browsers with modern JavaScript support by default. For a complete reference, you can see the [list of currently supported browser versions in Vite](https://vitejs.dev/guide/build.html#browser-compatibility).\n\n## Start a new project\n\n[Section titled Start a new project](#start-a-new-project)\n\n### Install from the CLI wizard\n\n[Section titled Install from the CLI wizard](#install-from-the-cli-wizard)\n\n1. Run the following command in your terminal to start our handy install wizard:\n\n\n\n\n- [npm](#tab-panel-495)\n- [pnpm](#tab-panel-496)\n- [yarn](#tab-panel-497)\n\n```\n\n# create a new project with npm\n\nnpm create astro@latest\n```\n\n```\n\n# create a new project with pnpm\n\npnpm create astro@latest\n```\n\n```\n\n# create a new project with yarn\n\nyarn create astro\n```\n\nYou can run `create astro` anywhere on your machine, so there‚Äôs no need to create a new empty directory for your project before you begin. If you don‚Äôt have an empty directory yet for your new project, the wizard will help create one for you automatically.\n\nIf all goes well, you will see a success message followed by some recommended next steps. Now that your project has been created, you can `cd` into your new project directory to begin using Astro.\n\n2. If you skipped the `npm install` step during the CLI wizard, then be sure to install your dependencies before continuing.\n\n3. You can now [start the Astro dev server](#start-the-astro-dev-server) and see a live preview of your project while you build!\n\n\n### Use a theme or starter template\n\n[Section titled Use a theme or starter template](#use-a-theme-or-starter-template)\n\nYou can also start a new astro project based on an [official example](https://github.com/withastro/astro/tree/main/examples) or the `main` branch of any GitHub repository by passing a `--template` argument to the `create astro` command.\n\n1. Explore our [themes and starters showcase](https://astro.build/themes/) where you can browse themes for blogs, portfolios, documentation sites, landing pages, and more! Or, [search on GitHub](https://github.com/search?o=desc&q=astro+starter&s=stars&type=Repositories) for even more starter projects.\n\n2. Run the following command in your terminal, substituting the official Astro starter template name, or the GitHub username and repository of the theme you want to use:\n\n\n\n\n- [npm](#tab-panel-498)\n- [pnpm](#tab-panel-499)\n- [yarn](#tab-panel-500)\n\n```\n\n# create a new project with an official example\n\nnpm create astro@latest -- --template <example-name>\n\n# create a new project based on a GitHub repository‚Äôs main branch\n\nnpm create astro@latest -- --template <github-username>/<github-repo>\n```\n\n```\n\n# create a new project with an official example\n\npnpm create astro@latest --template <example-name>\n\n# create a new project based on a GitHub repository‚Äôs main branch\n\npnpm create astro@latest --template <github-username>/<github-repo>\n```\n\n```\n\n# create a new project with an official example\n\nyarn create astro --template <example-name>\n\n# create a new project based on a GitHub repository‚Äôs main branch\n\nyarn create astro --template <github-username>/<github-repo>\n```\n\nBy default, this command will use the template repository‚Äôs `main` branch. To use a different branch name, pass it as part of the `--template` argument: `<github-username>/<github-repo>#<branch>`.\n\n3. Answer the questions and follow the instructions of the CLI wizard.\n\n4. You can now [start the Astro dev server](#start-the-astro-dev-server) and see a live preview of your project while you make it your own!\n\n\n## Edit your project\n\n[Section titled Edit your project](#edit-your-project)\n\nTo make changes to your project, open your project folder in your code editor. Working in development mode with the dev server running allows you to see updates to your site as you edit the code.\n\nYou can also [customize aspects of your development environment](#configure-your-dev-environment) such as configuring TypeScript or installing the official Astro editor extensions.\n\n### Start the Astro dev server\n\n[Section titled Start the Astro dev server](#start-the-astro-dev-server)\n\nAstro comes with a built-in development server that has everything you need for project development. The `astro dev` CLI command will start the local development server so that you can see your new website in action for the very first time.\n\nEvery starter template comes with a pre-configured script that will run `astro dev` for you. After navigating into your project directory, use your favorite package manager to run this command and start the Astro development server.\n\n- [npm](#tab-panel-501)\n- [pnpm](#tab-panel-502)\n- [yarn](#tab-panel-503)\n\n```\n\nnpm run dev\n```\n\n```\n\npnpm run dev\n```\n\n```\n\nyarn run dev\n```\n\nIf all goes well, Astro will now be serving your project on [http://localhost:4321/](http://localhost:4321/). Visit that link in your browser and see your new site!\n\n### Work in development mode\n\n[Section titled Work in development mode](#work-in-development-mode)\n\nAstro will listen for live file changes in your `src/` directory and update your site preview as you build, so you will not need to restart the server as you make changes during development. You will always be able to see an up-to-date version of your site in your browser when the dev server is running.\n\nWhen viewing your site in the browser, you‚Äôll have access to the [Astro dev toolbar](/en/guides/dev-toolbar/). As you build, it will help you inspect your [islands](/en/concepts/islands/), spot accessibility issues, and more.\n\nIf you aren‚Äôt able to open your project in the browser after starting the dev server, go back to the terminal where you ran the `dev` command and check the message displayed. It should tell you if an error occurred, or if your project is being served at a different URL than [http://localhost:4321/](http://localhost:4321/).\n\n### Configure your dev environment\n\n[Section titled Configure your dev environment](#configure-your-dev-environment)\n\nExplore the guides below to customize your development experience.\n\n[Editor Setup](/en/editor-setup/) Customize your code editor to improve the Astro developer experience and unlock new features.\n\n[Dev Toolbar](/en/guides/dev-toolbar/) Explore the helpful features of the dev toolbar.\n\n### TypeScript in Astro\n\n[Section titled TypeScript in Astro](#typescript-in-astro)\n\nAstro ships with built-in support for [TypeScript](https://www.typescriptlang.org/), which can help prevent errors at runtime by defining the shapes of objects and components in your code.\n\nYou don‚Äôt need to write TypeScript code in your Astro projects to benefit from it. Astro always treats your component code as TypeScript, and the [Astro VSCode Extension](/en/editor-setup/) will infer as much as it can to provide autocompletion, hints, and errors in your editor.\n\nRead more about using and configuring [TypeScript in Astro](/en/guides/typescript/)\n\n## Build and preview your site\n\n[Section titled Build and preview your site](#build-and-preview-your-site)\n\nTo check the version of your site that will be created at build time, quit the dev server ( `Ctrl` \\+ `C`) and run the appropriate build command for your package manager in your terminal:\n\n- [npm](#tab-panel-504)\n- [pnpm](#tab-panel-505)\n- [yarn](#tab-panel-506)\n\n```\n\nnpm run build\n```\n\n```\n\npnpm build\n```\n\n```\n\nyarn run build\n```\n\nAstro will build a deploy-ready version of your site in a separate folder ( `dist/` by default) and you can watch its progress in the terminal. This will alert you to any build errors in your project before you deploy to production. If TypeScript is configured to `strict` or `strictest`, the `build` script will also check your project for type errors.\n\nWhen the build is finished, run the appropriate `preview` command (e.g. `npm run preview`) in your terminal and you can view the built version of your site locally in the same browser preview window.\n\nNote that this previews your code as it existed when the build command was last run. This is meant to give you a preview of how your site will look when it is [deployed to the web](#deploy-your-new-site). Any later changes you make to your code after building will **not** be reflected while you preview your site until you run the build command again.\n\nUse ( `Ctrl` \\+ `C`) to quit the preview and run another terminal command, such as restarting the dev server to go back to [working in development mode](#work-in-development-mode) which does update as you edit to show a live preview of your code changes.\n\nRead more about [the Astro CLI](/en/reference/cli-reference/) and the terminal commands you will use as you build with Astro.\n\n## Deploy your new site\n\n[Section titled Deploy your new site](#deploy-your-new-site)\n\nYou may wish to [deploy your new site right away](/en/guides/deploy/), before you begin to add or change too much code. This is helpful to get a minimal, working version of your site published and can save you extra time and effort troubleshooting your deployment later.\n\n## Next Steps\n\n[Section titled Next Steps](#next-steps)\n\nSuccess! You are now ready to start building with Astro! ü•≥\n\nHere are a few things that we recommend exploring next. You can read them in any order. You can even leave our documentation for a bit and go play in your new Astro project codebase, coming back here whenever you run into trouble or have a question.\n\n### Explore Astro‚Äôs Features\n\n[Section titled Explore Astro‚Äôs Features](#explore-astros-features)\n\n[Understand your codebase](/en/basics/project-structure/) Learn about Astro‚Äôs file structure in our Project Structure guide.\n\n[Create content collections](/en/guides/content-collections/) Add content to your new site with frontmatter validation and automatic type-safety.\n\n[Add view transitions](/en/guides/view-transitions/) Create seamless page transitions and animations.\n\n[Learn about Islands](/en/concepts/islands/) Read about Astro's island architecture.\n\n### Take the introductory tutorial\n\n[Section titled Take the introductory tutorial](#take-the-introductory-tutorial)\n\nBuild a fully functional Astro blog starting from a single blank page in our [introductory tutorial](/en/tutorial/0-introduction/).\n\nThis is a great way to see how Astro works and walks you through the basics of pages, layouts, components, routing, islands, and more. It also includes an optional, beginner-friendly unit for those newer to web development concepts in general, which will guide you through installing the necessary applications on your computer, creating a GitHub account, and deploying your site.\n\n## Manual Setup\n\n[Section titled Manual Setup](#manual-setup)\n\nThis guide will walk you through the steps to manually install and configure a new Astro project.\n\nIf you prefer not to use our automatic `create astro` CLI tool, you can set up your project yourself by following the guide below.\n\n1. Create your directory\n\nCreate an empty directory with the name of your project, and then navigate into it.\n\n\n\n```\n\n\nmkdir my-astro-project\n\ncd my-astro-project\n```\n\n\n\n\n\n\n\n\n\nOnce you are in your new directory, create your project `package.json` file. This is how you will manage your project dependencies, including Astro. If you aren‚Äôt familiar with this file format, run the following command to create one.\n\n\n\n\n- [npm](#tab-panel-507)\n- [pnpm](#tab-panel-508)\n- [yarn](#tab-panel-509)\n\n```\n\nnpm init --yes\n```\n\n```\n\npnpm init\n```\n\n```\n\nyarn init --yes\n```\n\n2. Install Astro\n\nFirst, install the Astro project dependencies inside your project.\n\n\n\n\n- [npm](#tab-panel-510)\n- [pnpm](#tab-panel-511)\n- [yarn](#tab-panel-512)\n\n```\n\nnpm install astro\n```\n\n```\n\npnpm add astro\n```\n\n```\n\nyarn add astro\n```\n\nThen, replace any placeholder ‚Äúscripts‚Äù section of your `package.json` with the following:\n\n```\n\n  \"scripts\": {\n\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\n    \"dev\": \"astro dev\",\n\n    \"start\": \"astro dev\",\n\n    \"build\": \"astro build\",\n\n    \"preview\": \"astro preview\"\n\n  },\n```\n\nYou‚Äôll use these scripts later in the guide to start Astro and run its different commands.\n\n3. Create your first page\n\nIn your text editor, create a new file in your directory at `src/pages/index.astro`. This will be your first Astro page in the project.\n\nFor this guide, copy and paste the following code snippet (including `---` dashes) into your new file:\n\n\n\n```\n\n\n   ---\n\n// Welcome to Astro! Everything between these triple-dash code fences\n\n// is your \"component frontmatter\". It never runs in the browser.\n\nconsole.log('This runs in your terminal, not the browser!');\n\n   ---\n\n<!-- Below is your \"component template.\" It's just HTML, but with\n\n       some magic sprinkled in to help you build great templates. -->\n\n<html>\n\n     <body>\n\n       <h1>Hello, World!</h1>\n\n     </body>\n\n</html>\n\n<style>\n\n     h1 {\n\n       color: orange;\n\n     }\n\n</style>\n```\n\n4. Create your first static asset\n\nYou will also want to create a `public/` directory to store your static assets. Astro will always include these assets in your final build, so you can safely reference them from inside your component templates.\n\nIn your text editor, create a new file in your directory at `public/robots.txt`. `robots.txt` is a simple file that most sites will include to tell search bots like Google how to treat your site.\n\nFor this guide, copy and paste the following code snippet into your new file:\n\n\n\n```\n\n\n# Example: Allow all bots to scan and index your site.\n\n# Full syntax: https://developers.google.com/search/docs/advanced/robots/create-robots-txt\n\nUser-agent: *\n\nAllow: /\n```\n\n5. Create `astro.config.mjs`\n\nAstro is configured using `astro.config.mjs`. This file is optional if you do not need to configure Astro, but you may wish to create it now.\n\nCreate `astro.config.mjs` at the root of your project, and copy the code below into it:\n\n\n\n```\n\n\nimport { defineConfig } from 'astro/config';\n\n\n\n\n// https://astro.build/config\n\nexport default defineConfig({});\n```\n\n\n\n\n\n\n\n\n\nIf you want to include [UI framework components](/en/guides/framework-components/) such as React, Svelte, etc. or use other tools such as Tailwind or Partytown in your project, here is where you will [manually import and configure integrations](/en/guides/integrations-guide/).\n\nRead Astro‚Äôs [API configuration reference](/en/reference/configuration-reference/) for more information.\n\n6. Add TypeScript support\n\nTypeScript is configured using `tsconfig.json`. Even if you don‚Äôt write TypeScript code, this file is important so that tools like Astro and VS Code know how to understand your project. Some features (like npm package imports) aren‚Äôt fully supported in the editor without a `tsconfig.json` file.\n\nIf you do intend to write TypeScript code, using Astro‚Äôs `strict` or `strictest` template is recommended. You can view and compare the three template configurations at [astro/tsconfigs/](https://github.com/withastro/astro/blob/main/packages/astro/tsconfigs/).\n\nCreate `tsconfig.json` at the root of your project, and copy the code below into it. (You can use `base`, `strict`, or `strictest` for your TypeScript template):\n\n\n\n```\n\n\n{\n\n     \"extends\": \"astro/tsconfigs/base\"\n\n}\n```\n\n\n\n\n\n\n\n\n\nRead Astro‚Äôs [TypeScript setup guide](/en/guides/typescript/#setup) for more information.\n\n7. Next Steps\n\nIf you have followed the steps above, your project directory should now look like this:\n\n\n- Directorynode\\_modules/\n\n- ‚Ä¶\n\n- Directorypublic/\n\n\n- robots.txt\n\n- Directorysrc/\n\n\n- Directorypages/\n\n\n- index.astro\n\n- astro.config.mjs\n- package-lock.jsonor `yarn.lock`, `pnpm-lock.yaml`, etc.\n- package.json\n- tsconfig.json\n\n8. You can now [start the Astro dev server](#start-the-astro-dev-server) and see a live preview of your project while you build!\n\n\nLearn\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)\n\n![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Finstall-and-setup%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=45541176)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/install-and-setup/",
      "title": "Install and set up Astro | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/install-and-setup.webp",
      "ogTitle": "Install and set up Astro",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/install-and-setup/",
      "ogSiteName": "Docs",
      "description": "How to install Astro and start working in a new project.",
      "ogDescription": "How to install Astro and start working in a new project.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Astro Docs\n\nGuides, resources, and API references to help you build with Astro.\n\n[Install Astro](/en/install-and-setup/) [Learn about Astro‚Äôs features](/en/concepts/why-astro/)\n\nPowered by Astro and our open-source contributors. [Join us!](/en/contribute/)\n\n![](https://docs.astro.build/_astro/361671_Z1LvfzD.webp)![](https://docs.astro.build/_astro/5098874_1qCCVF.webp)![](https://docs.astro.build/_astro/357379_1daaCe.webp)\n\n![](https://docs.astro.build/_astro/7118177_311tA.webp)![](https://docs.astro.build/_astro/3019731_ZJLyDd.webp)![](https://docs.astro.build/_astro/34116392_Z14UBo9.webp)![](https://docs.astro.build/_astro/108291165_1qi7fG.webp)\n\n![](https://docs.astro.build/_astro/602478_EY8lO.webp)![](https://docs.astro.build/_astro/39112954_1xNSw5.webp)![](https://docs.astro.build/_astro/622227_1H22Un.webp)\n\n![](https://docs.astro.build/_astro/85648028_Z1LmUI7.webp)![](https://docs.astro.build/_astro/61414485_Z2qNaic.webp)![](https://docs.astro.build/_astro/15368_2aubbz.webp)\n\n![](https://docs.astro.build/_astro/51384119_ZGiEEk.webp)![](https://docs.astro.build/_astro/25167721_Zd6Nno.webp)![](https://docs.astro.build/_astro/78129249_1pFGIV.webp)![](https://docs.astro.build/_astro/15836226_Z1ngYFG.webp)![](https://docs.astro.build/_astro/494699_Z2aSKbo.webp)![](https://docs.astro.build/_astro/7889778_Z2fpa35.webp)\n\n![](https://docs.astro.build/_astro/1369770_ATjcH.webp)![](https://docs.astro.build/_astro/14293805_q4gCq.webp)![](https://docs.astro.build/_astro/46791833_2q2JSc.webp)![](https://docs.astro.build/_astro/10626596_1ipKvc.webp)\n\n![](https://docs.astro.build/_astro/36526527_Z1zNEQ9.webp)![](https://docs.astro.build/_astro/69633530_1pnUvd.webp)![](https://docs.astro.build/_astro/69170106_Qui7b.webp)![](https://docs.astro.build/_astro/25839948_ZqboI7.webp)![](https://docs.astro.build/_astro/4033662_IVN0O.webp)![](https://docs.astro.build/_astro/64310361_1Y6b3b.webp)\n\nPowered by Astro and our open-source contributors. [Join us!](/en/contribute/)\n\n![](https://docs.astro.build/_astro/45965090_2kPPFB.webp)![](https://docs.astro.build/_astro/15145918_Z2boU7c.webp)![](https://docs.astro.build/_astro/44530252_Z2w3BU3.webp)\n\n![](https://docs.astro.build/_astro/188426_Z1cXpjv.webp)![](https://docs.astro.build/_astro/6137925_Zpnftp.webp)![](https://docs.astro.build/_astro/81974850_1c3xgD.webp)\n\n![](https://docs.astro.build/_astro/59021693_Z1AvWAv.webp)![](https://docs.astro.build/_astro/11063910_uyfGI.webp)![](https://docs.astro.build/_astro/94928215_dX83x.webp)\n\nWhat will you build with Astro?\n\nExplore [Astro starter themes](https://astro.build/themes/) for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more!\n\nTake a guided tour\n\nComplete our introductory [Build a Blog Tutorial](/en/tutorial/0-introduction/) to learn the basics and create your first Astro site.\n\nStart a new project\n\n```\n\n# create a new project with npm\n\nnpm create astro@latest\n```\n\nOur [installation guide](/en/install-and-setup/) has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually.\n\nLearn\n\n- [Astro‚Äôs main features](/en/concepts/why-astro/)\n- [Island architecture](/en/concepts/islands/)\n- [Astro components](/en/basics/astro-components/)\n- [The Astro template syntax](/en/basics/astro-syntax/)\n\nExtend\n\n- [Add integrations like React, and Tailwind](/en/guides/integrations-guide/)\n- [Create type safe content collections](/en/guides/content-collections/)\n- [Enhance navigation with view transitions](/en/guides/view-transitions/)\n- [Connect a headless CMS to your project](/en/guides/cms/)\n\n## Have a question or want to get involved?\n\n![](https://docs.astro.build/_astro/houston_love.BttrNCcZ_ZAldGA.webp)[Join our Discord](https://astro.build/chat)\n\nLearn\n\n[Contribute](/en/contribute/)\nGive us feedback\n\n\nClose feedback form\n\n# What‚Äôs on your mind?\n\n[**Create GitHub Issue**\\\\\n\\\\\nQuickest way to alert our team of a problem.](https://github.com/withastro/docs/issues/new)\n\n## Send us feedback\n\nSend us a message directly.\n\n\nClose feedback form\n\n# Send us feedback\n\nChoose feedback category\nIssue\n\nIdea\n\nOther\n\nMessage\nSubmit feedback [Privacy Policy](https://astro.build/privacy/)\n\n![](https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp)\n\nThanks! We received your feedback.\n\n\n[Community](https://community.astro.build)\n\n![](https://cdn.usefathom.com/?h=https%3A%2F%2Fdocs.astro.build&p=%2Fen%2Fgetting-started%2F&r=&sid=EZBHTSIG&qs=%7B%7D&cid=94497854)",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/getting-started/",
      "title": "Getting Started | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp",
      "ogTitle": "Getting Started",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en/getting-started/",
      "ogSiteName": "Docs",
      "description": "A basic intro to Astro.",
      "ogDescription": "A basic intro to Astro.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  },
  {
    "markdown": "\n\n# Astro Docs\n\nGuides, resources, and API references to help you build with Astro.\n\n[Install Astro](/en/install-and-setup/) [Learn about Astro‚Äôs features](/en/concepts/why-astro/)\n\nPowered by Astro and our open-source contributors. [Join us!](/en/contribute/)\n\n![](https://docs.astro.build/_astro/361671_Z1LvfzD.webp)![](https://docs.astro.build/_astro/5098874_1qCCVF.webp)![](https://docs.astro.build/_astro/357379_1daaCe.webp)\n\n![](https://docs.astro.build/_astro/7118177_311tA.webp)![](https://docs.astro.build/_astro/3019731_ZJLyDd.webp)![](https://docs.astro.build/_astro/34116392_Z14UBo9.webp)![](https://docs.astro.build/_astro/108291165_1qi7fG.webp)\n\n![](https://docs.astro.build/_astro/602478_EY8lO.webp)![](https://docs.astro.build/_astro/39112954_1xNSw5.webp)![](https://docs.astro.build/_astro/622227_1H22Un.webp)\n\n![](https://docs.astro.build/_astro/85648028_Z1LmUI7.webp)![](https://docs.astro.build/_astro/61414485_Z2qNaic.webp)![](https://docs.astro.build/_astro/15368_2aubbz.webp)\n\n![](https://docs.astro.build/_astro/51384119_ZGiEEk.webp)![](https://docs.astro.build/_astro/25167721_Zd6Nno.webp)![](https://docs.astro.build/_astro/78129249_1pFGIV.webp)![](https://docs.astro.build/_astro/15836226_Z1ngYFG.webp)![](https://docs.astro.build/_astro/494699_Z2aSKbo.webp)![](https://docs.astro.build/_astro/7889778_Z2fpa35.webp)\n\n![](https://docs.astro.build/_astro/1369770_ATjcH.webp)![](https://docs.astro.build/_astro/14293805_q4gCq.webp)![](https://docs.astro.build/_astro/46791833_2q2JSc.webp)![](https://docs.astro.build/_astro/10626596_1ipKvc.webp)\n\n![](https://docs.astro.build/_astro/36526527_Z1zNEQ9.webp)![](https://docs.astro.build/_astro/69633530_1pnUvd.webp)![](https://docs.astro.build/_astro/69170106_Qui7b.webp)![](https://docs.astro.build/_astro/25839948_ZqboI7.webp)![](https://docs.astro.build/_astro/4033662_IVN0O.webp)![](https://docs.astro.build/_astro/64310361_1Y6b3b.webp)\n\nPowered by Astro and our open-source contributors. [Join us!](/en/contribute/)\n\n![](https://docs.astro.build/_astro/45965090_2kPPFB.webp)![](https://docs.astro.build/_astro/15145918_Z2boU7c.webp)![](https://docs.astro.build/_astro/44530252_Z2w3BU3.webp)\n\n![](https://docs.astro.build/_astro/188426_Z1cXpjv.webp)![](https://docs.astro.build/_astro/6137925_Zpnftp.webp)![](https://docs.astro.build/_astro/81974850_1c3xgD.webp)\n\n![](https://docs.astro.build/_astro/59021693_Z1AvWAv.webp)![](https://docs.astro.build/_astro/11063910_uyfGI.webp)![](https://docs.astro.build/_astro/94928215_dX83x.webp)\n\nWhat will you build with Astro?\n\nExplore [Astro starter themes](https://astro.build/themes/) for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more!\n\nTake a guided tour\n\nComplete our introductory [Build a Blog Tutorial](/en/tutorial/0-introduction/) to learn the basics and create your first Astro site.\n\nStart a new project",
    "metadata": {
      "ogUrl": "https://docs.astro.build/en/getting-started/",
      "title": "Getting Started | Docs",
      "ogImage": "https://docs.astro.build/open-graph/en/getting-started.webp",
      "ogTitle": "Getting Started",
      "language": "en",
      "ogLocale": "en",
      "sourceURL": "https://docs.astro.build/en",
      "ogSiteName": "Docs",
      "description": "A basic intro to Astro.",
      "ogDescription": "A basic intro to Astro.",
      "ogLocaleAlternate": [],
      "statusCode": 200
    }
  }
]